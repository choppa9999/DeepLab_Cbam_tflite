# --- Base Image ---
# Raspberry Pi (ARM64) 환경에 맞는 Python 3.9 공식 이미지를 기반으로 시작합니다.
# 사용하시는 라즈베리파이 OS와 Python 버전에 맞춰 이미지를 변경할 수 있습니다.
# (예: 32비트 OS의 경우 arm32v7/python:3.9-slim-bullseye)
FROM --platform=linux/arm64 python:3.9-slim-bullseye

# --- Metadata ---
LABEL author="Your Name"
LABEL description="TFLite model inference for road surface segmentation on Raspberry Pi."

# --- Environment Variables ---
# Python이 버퍼링 없이 로그를 즉시 출력하도록 설정합니다.
ENV PYTHONUNBUFFERED 1
# PIP 타임아웃 시간을 늘려 네트워크가 느린 환경에서도 안정적으로 설치되도록 합니다.
ENV PIP_DEFAULT_TIMEOUT=100

# --- Working Directory ---
# 컨테이너 내 작업 디렉토리를 설정합니다.
WORKDIR /app

# --- System Dependencies ---
# 필요한 시스템 라이브러리를 설치합니다.
# Pillow, OpenCV 등 이미지 처리 라이브러리가 의존하는 라이브러리들을 포함합니다.
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    libjpeg-dev \
    zlib1g-dev \
    libgl1-mesa-glx \
    libglib2.0-0 && \
    # apt-get 캐시를 정리하여 이미지 용량을 줄입니다.
    rm -rf /var/lib/apt/lists/*

# --- Python Dependencies ---
# 먼저 requirements.txt 파일을 복사하여 의존성을 설치합니다.
# 이렇게 하면 소스 코드가 변경될 때마다 매번 의존성을 새로 설치하지 않아도 되어 빌드 속도가 향상됩니다.
COPY requirements.txt .
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir -r requirements.txt

# --- Copy Application Code ---
# 소스 코드를 컨테이너의 작업 디렉토리로 복사합니다.
COPY . .

# --- Entrypoint ---
# 컨테이너가 시작될 때 실행할 명령어를 정의합니다.
# 'python3', 'inference_tflite.py'가 기본 명령어가 되며,
# `docker run` 시 이 뒤에 --model_path, --input_path 등의 인자를 추가하여 실행할 수 있습니다.
ENTRYPOINT ["python3", "inference_tflite.py"]
